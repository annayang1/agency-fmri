#subset only choice rows
choiceDF <- subset(alltrialsdat, alltrialsdat$test_part != "" & alltrialsdat$test_part != "practice")
rep3 <- rep(1:80,each = 1)
rep4 <- rep(rep3,length(unique(choiceDF$subject)))
choiceDF$trial_num <- rep4
choiceDF$subject <- as.factor(choiceDF$subject)
#choiceDF$block_num <- as.factor(choiceDF$block_num)
choiceDF$trial_num <- as.factor(choiceDF$trial_num)
choiceDF$rt <- as.numeric(as.character(choiceDF$rt))
# make a new variable for trial type
choiceDF$trial_type <- NA
for (i in 1:nrow(choiceDF)){
if (choiceDF$correct_response[i] == "32"){
choiceDF$trial_type[i] <- "go"
} else {
choiceDF$trial_type[i] <- "nogo"
}
}
# check accuracy using table
accuracy_table <- table(choiceDF$correct, choiceDF$p_reward) #by block
accuracy_table
names(choiceDF)
modelDF <- subset(choiceDF, select = c("rt","trial_type", "rplus", "rminus"
"subject", "key_press",
"correct","trial_num"))
modelDF <- subset(choiceDF, select = c("rt","trial_type", "rplus", "rminus",
"subject", "key_press",
"correct","trial_num"))
View(modelDF)
View(modelDF)
modelDF2$condition <- NA
for (i in 1:nrow(modelDF2)){
if (modelDF2$trial_type[i] == "go"){
modelDF2$condition[i] <- 1
} else if (modelDF2$trial_type[i] == "nogo"){
modelDF2$condition[i] <- 2
}
}
modelDF <- subset(choiceDF, select = c("rt","trial_type", "rplus", "rminus", "p_reward"
"subject", "key_press",
"correct","trial_num"))
prew <- modelDF$p_reward[which(modelDF$trial_num == 1)] #fix issue where 2nd section wasn't printing correctly
prew1 <- rep(prew, each = 80)
modelDF$p_reward <- prew1
modelDF$p_reward <- as.character(modelDF$p_reward)
require(stringr)
blah <- do.call(rbind, str_split(modelDF$p_reward, ','))
colnames(blah) <- c("p_reward1", "p_neutral")
modelDF2 <- cbind(blah, modelDF)
modelDF2$p_reward1 <- as.numeric(as.character(modelDF2$p_reward1))
modelDF2$p_neutral <- as.numeric(as.character(modelDF2$p_neutral))
modelDF <- subset(choiceDF, select = c("rt","trial_type", "rplus", "rminus", "p_reward",
"subject", "key_press",
"correct","trial_num"))
prew <- modelDF$p_reward[which(modelDF$trial_num == 1)] #fix issue where 2nd section wasn't printing correctly
prew1 <- rep(prew, each = 80)
modelDF$p_reward <- prew1
modelDF$p_reward <- as.character(modelDF$p_reward)
require(stringr)
blah <- do.call(rbind, str_split(modelDF$p_reward, ','))
colnames(blah) <- c("p_reward1", "p_neutral")
modelDF2 <- cbind(blah, modelDF)
modelDF2$p_reward1 <- as.numeric(as.character(modelDF2$p_reward1))
modelDF2$p_neutral <- as.numeric(as.character(modelDF2$p_neutral))
modelDF2$condition <- NA
for (i in 1:nrow(modelDF2)){
if (modelDF2$trial_type[i] == "go"){
modelDF2$condition[i] <- 1
} else if (modelDF2$trial_type[i] == "nogo"){
modelDF2$condition[i] <- 2
}
}
# change button press to 1/2 instead of 32/null
modelDF2$button_press <- NA
for (i in 1:nrow(modelDF2)){
if (modelDF2$key_press[i] == "32"){
modelDF2$button_press[i] <- 2
} else {
modelDF2$button_press[i] <- 1
}
}
# change correct from t/f to 1/0
modelDF2$accuracy <- NA
for (i in 1:nrow(modelDF2)){
if (modelDF2$correct[i] == "true"){
modelDF2$accuracy[i] <- 1
} else {
modelDF2$accuracy[i] <- 0
}
}
# remove columns that are repeats or strings
printdat <- subset(modelDF2, select = -c(trial_type,key_press,correct,p_reward))
head(alltrialsdat$stimulus,10)
test <- alltrialsdat[grep("reward|neutral", alltrialsdat$stimulus), ]
test2 <- test[-grep("test", test$stimulus),]
# change correct from t/f to 1/0
test2$feedback[grepl("reward", test2$stimulus, ignore.case=FALSE)] <- 1
test2$feedback[grepl("neutral", test2$stimulus, ignore.case=FALSE)] <- 0
head(alltrialsdat$stimulus,10)
test <- alltrialsdat[grep("reward|neutral", alltrialsdat$stimulus), ]
test2 <- test[-grep("test", test$stimulus),]
test2$feedback1[grepl("reward", test2$stimulus, ignore.case=FALSE)] <- 1
test2$feedback1[grepl("neutral", test2$stimulus, ignore.case=FALSE)] <- 0
printdat$feedback <- test2$feedback1
View(printdat)
write.csv(printdat, "model_df_2x2R.csv", row.names = FALSE, quote = FALSE)
names(printdat)
View(printdat)
levels(printdat$rplus)
unique(printdat$rplus)
setwd("/Users/hayley/Dropbox (Personal)/Studies/Pavlovian Conflict/pavlovian1205/data/")
temp1 = list.files(pattern ="*.csv")  #all data files
# prep
allData <- lapply(temp1, function(.file){
dat<-read.csv(.file, header=T)
#dat$id<-as.character(.file)
dat    # return the dataframe
})
# combine into all trials, all subjects
alltrialsdat <- do.call(rbind, allData)
alltrialsdat <- rbind.fill(allData)     #do this if you have uneven columns
allHitIDs <- alltrialsdat$hitID
unique(alltrialsdat$hitID) #4 unique hit IDs
length(unique(alltrialsdat$mturkID)) # n= 49 subjects collected
length(unique(alltrialsdat$subject)) # n= 49 subjects
#subset only choice rows
choiceDF <- subset(alltrialsdat, alltrialsdat$test_part != "" & alltrialsdat$test_part != "practice")
rep3 <- rep(1:80,each = 1)
rep4 <- rep(rep3,length(unique(choiceDF$subject)))
choiceDF$trial_num <- rep4
choiceDF$subject <- as.factor(choiceDF$subject)
#choiceDF$block_num <- as.factor(choiceDF$block_num)
choiceDF$trial_num <- as.factor(choiceDF$trial_num)
choiceDF$rt <- as.numeric(as.character(choiceDF$rt))
# make a new variable for trial type
choiceDF$trial_type <- NA
for (i in 1:nrow(choiceDF)){
if (choiceDF$correct_response[i] == "32"){
choiceDF$trial_type[i] <- "go"
} else {
choiceDF$trial_type[i] <- "nogo"
}
}
# check accuracy using table
accuracy_table <- table(choiceDF$correct, choiceDF$p_reward) #by block
accuracy_table
modelDF <- subset(choiceDF, select = c("rt","trial_type", "rplus", "rminus",
"subject", "key_press",
"correct","trial_num"))
modelDF$trial_condition <- NA
for (i in 1:nrow(modelDF)){
if (modelDF$trial_type[i] == "go"){
modelDF$trial_condition[i] <- 1
} else if (modelDF$trial_type[i] == "nogo"){
modelDF$trial_condition[i] <- 2
}
}
modelDF$button_press <- NA
for (i in 1:nrow(modelDF)){
if (modelDF$key_press[i] == "32"){
modelDF$button_press[i] <- 2
} else {
modelDF$button_press[i] <- 1
}
}
modelDF$accuracy <- NA
for (i in 1:nrow(modelDF)){
if (modelDF$correct[i] == "true"){
modelDF$accuracy[i] <- 1
} else {
modelDF$accuracy[i] <- 0
}
}
printdat <- subset(modelDF, select = -c(trial_type,key_press,correct,p_reward))
head(alltrialsdat$stimulus,10)
test <- alltrialsdat[grep("reward|neutral", alltrialsdat$stimulus), ]
test2 <- test[-grep("test", test$stimulus),]
# change correct from t/f to 1/0
test2$feedback1[grepl("reward", test2$stimulus, ignore.case=FALSE)] <- 1
test2$feedback1[grepl("neutral", test2$stimulus, ignore.case=FALSE)] <- 0
printdat$feedback <- test2$feedback1
# remove columns that are repeats or strings
printdat <- subset(modelDF, select = -c(trial_type,key_press,correct,p_reward))
# remove columns that are repeats or strings
printdat <- subset(modelDF, select = -c(trial_type,key_press,correct))
head(alltrialsdat$stimulus,10)
test <- alltrialsdat[grep("reward|neutral", alltrialsdat$stimulus), ]
test2 <- test[-grep("test", test$stimulus),]
test2$feedback1[grepl("reward", test2$stimulus, ignore.case=FALSE)] <- 1
test2$feedback1[grepl("neutral", test2$stimulus, ignore.case=FALSE)] <- 0
printdat$feedback <- test2$feedback1
choiceDF$reward_condition <- NA
for (i in 1:nrow(choiceDF)){
if (choiceDF$rplus[i] == 0.6){
choiceDF$reward_condition[i] <- 1
} else if (choiceDF$rplus[i] == 0.7){
choiceDF$reward_condition[i] <- 2
} else if (choiceDF$rplus[i] == 0.8){
choiceDF$reward_condition[i] <- 3
}else if (choiceDF$rplus[i] == 0.9){
choiceDF$reward_condition[i] <- 4
}
}
setwd("/Users/hayley/Dropbox (Personal)/HayleyCCNL/Pavlovian Conflict/analyses/")  #this prints a df of task data for all subjects, regardless of survey responses
write.csv(printdat, "model_df_2x2R.csv", row.names = FALSE, quote = FALSE)
names(choiceDF)
modelDF <- subset(choiceDF, select = c("rt","trial_type", "rplus", "rminus",
"subject", "key_press",
"correct","trial_num","reward_condition"))
modelDF$trial_condition <- NA
for (i in 1:nrow(modelDF)){
if (modelDF$trial_type[i] == "go"){
modelDF$trial_condition[i] <- 1
} else if (modelDF$trial_type[i] == "nogo"){
modelDF$trial_condition[i] <- 2
}
}
# change button press to 1/2 instead of 32/null
modelDF$button_press <- NA
for (i in 1:nrow(modelDF)){
if (modelDF$key_press[i] == "32"){
modelDF$button_press[i] <- 2
} else {
modelDF$button_press[i] <- 1
}
}
# change correct from t/f to 1/0
modelDF$accuracy <- NA
for (i in 1:nrow(modelDF)){
if (modelDF$correct[i] == "true"){
modelDF$accuracy[i] <- 1
} else {
modelDF$accuracy[i] <- 0
}
}
# remove columns that are repeats or strings
printdat <- subset(modelDF, select = -c(trial_type,key_press,correct))
head(alltrialsdat$stimulus,10)
test <- alltrialsdat[grep("reward|neutral", alltrialsdat$stimulus), ]
test2 <- test[-grep("test", test$stimulus),]
# change correct from t/f to 1/0
test2$feedback1[grepl("reward", test2$stimulus, ignore.case=FALSE)] <- 1
test2$feedback1[grepl("neutral", test2$stimulus, ignore.case=FALSE)] <- 0
printdat$feedback <- test2$feedback1
# make a new variable for condition
choiceDF$reward_condition <- NA
for (i in 1:nrow(choiceDF)){
if (choiceDF$rplus[i] == 0.6){
choiceDF$reward_condition[i] <- 1
} else if (choiceDF$rplus[i] == 0.7){
choiceDF$reward_condition[i] <- 2
} else if (choiceDF$rplus[i] == 0.8){
choiceDF$reward_condition[i] <- 3
}else if (choiceDF$rplus[i] == 0.9){
choiceDF$reward_condition[i] <- 4
}
}
setwd("/Users/hayley/Dropbox (Personal)/HayleyCCNL/Pavlovian Conflict/analyses/")  #this prints a df of task data for all subjects, regardless of survey responses
write.csv(printdat, "model_df_2x2R.csv", row.names = FALSE, quote = FALSE)
setwd("/Users/hayley/Dropbox (Personal)/Studies/OptControl/UCR_fMRI/behavioral_data/")
temp1 = list.files(pattern ="*.csv")  #all data files
# prep
allData <- lapply(temp1, function(.file){
#dat<-read.csv(.file, header=T, col.names = paste0("V",seq_len(137)), fill = TRUE) ###The problem is that they added variables when fixing things, so need to figure out how to concatenate without losing info!
#dat<-read.csv(.file, header=T, fill = TRUE) ###The problem is that they added variables when fixing things, so need to figure out how to concatenate without losing info!
dat<-read.csv(.file, header=T)
#dat$id<-as.character(.file)
dat    # return the dataframe
})
# combine into all trials, all subjects
#test <- do.call(merge(allData, all.y = T, all.x = T), allData)
require(plyr)
#df <- rbind.fill(allData)
df <- do.call(rbind, allData)
length(unique(df$participant)) # n=22 subjects collected
table(df$participant) # how many trials do you have for each subject?
index <- which(table(df$participant) != 125) #which subjects dont have all 120 trials?
df3 <- df[!is.na(df$exp_mode),] #remove some of the NA rows
length(unique(df3$participant)) # now we have n=22 subjects
rep1 <- rep(1:4,each = 31)
rep1a <- c(0,rep1)
rep2 <- rep(rep1a,length(unique(df3$participant)))
df3$run_num <- rep2
names(df3)
View(df3)
df4 <- subset(df3, select = c("run_num","trial","condition", "participant",
"dpxTriggerRaw","dpxWaitScanOnset","dpxTrialOnset",
"dpxMineButton", "dpxTrialOffset","dpxIsi1Onset","dpxIsi1Offset",
"dpxFeedbackOnset","feedback", "dpxFeedbackOffset",
"dpxIsi2Onset", "dpxIsi2Offset",
"dpxInterventionOnset","agent_interv","dpxInterventionButton", "dpxInterventionOffset",
"dpxItiOnset", "dpxItiOffset", "dpxIriOnset", "dpxIriOffset"))
df4$dpxTrialOnset - df4$dpxWaitScanOnset
names(df4)
cols <- c(7,9:12,14:17,20:24)
df4[,cols] - df4$dpxWaitScanOnset
test <- df4[,cols] - df4$dpxWaitScanOnset
View(test)
which(df4$dpxWaitScanOnset != NA)
which(is.na((df4$dpxWaitScanOnset))
which(is.na(df4$dpxWaitScanOnset))
which(!is.nadf4$dpxWaitScanOnset)
which(!is.na(df4$dpxWaitScanOnset))
which(!is.na(df4$dpxWaitScanOnset))
onsets <- which(!is.na(df4$dpxWaitScanOnset))
onsets[1]
onsets[2]
unique(length(df4$trial)
)
unique(df4$trial)
names(df3)
length(unique(df3$subject)
)
rep(rep3,length(unique(df3$participant)))
length(unique(df3$participant))
View(df3)
View(test)
View(df3)
cols
onsets
length(unique(df4$participant))
length(df4$trial))
length(df4$trial)
blah <- rep(df4$dpxWaitScanOnset, each = 31)
test <- which(!is.na(blah))
test2 <- blah[test]
test2
df4$triggerstart <- test2
onsets <- which(!is.na(df4$dpxWaitScanOnset)) #where are your run onset times?
df5 <- df4[-onsets,]
blah <- rep(df4$dpxIriOnset, each = 125)
test <- which(!is.na(blah))
test2 <- blah[test]
rep(df4$dpxIriOnset, each = 125)
which(!is.na(blah))
!is.na(df4$dpxIriOnset)
rep(!is.na(df4$dpxIriOnset, each = 125))
rep(!is.na(df4$dpxIriOnset), each = 125)
## Fill in IRI time variables
onsets <- which(!is.na(df4$dpxWaitScanOnset))  #where are your run onset times?
df4$dpxIriOnset[onsets]
## Fill in IRI time variables
onsets <- which(!is.na(df4$dpxIriOnset))  #where are your run onset times?
df4$dpxIriOnset[onsets]
blah <- rep(df4$dpxIriOnset[onsets], each = 125)
blah <- rep(df4$dpxIriOnset[onsets], each = 30)
test <- which(!is.na(blah))
test2 <- blah
onsets2 <- which(!is.na(df4$dpxIriOffset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah2 <- rep(df4$dpxIriOffset[onsets2], each = 30) # here are your final IRI onsets to be fed into your df
## Fill in trigger start time variable
onsets3 <- which(!is.na(df4$dpxWaitScanOnset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah3 <- rep(df4$dpxWaitScanOnset[onsets3], each = 30) # here are your final trigger onsets to be fed into your df
## Fill in IRI time variables
onsets <- which(!is.na(df4$dpxIriOnset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah <- rep(df4$dpxIriOnset[onsets], each = 30) # here are your final IRI onsets to be fed into your df
onsets2 <- which(!is.na(df4$dpxIriOffset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah2 <- rep(df4$dpxIriOffset[onsets2], each = 30) # here are your final IRI onsets to be fed into your df
emptyrow <- which(!is.na(df4$trial))
which(!is.na(df4$trial))
emptyrow <- which(is.na(df4$trial))
df5 <- df4[-emptyrow,]
View(df5)
df5$dpxWaitScanOnset <- blah3
View(df5)
df5$dpxIriOnset <- blah
df5$dpxIriOffset <- blah2
View(df5)
df5$dpxTrialOnset - df5$dpxWaitScanOnset
test <- df5$dpxTrialOnset - df5$dpxWaitScanOnset
View(df5)
df5$trial_onset <- df5$dpxTrialOnset - df5$dpxWaitScanOnset
df5$trigger_onset <- 0
names(df5)
df5$trial_onset <- df5$dpxTrialOnset - df5$dpxWaitScanOnset
df5$trial_offset <- df5$dpxTrialOffset - df5$dpxWaitScanOnset
df5$isi1_onset <- df5$dpxIsi1Onset - df5$dpxWaitScanOnset
df5$isi1_offset <- df5$dpxIsi1Offset - df5$dpxWaitScanOnset
df5$fb_onset <- df5$dpxFeedbackOnset - df5$dpxWaitScanOnset
df5$fb_offset <- df5$dpxFeedbackOffset - df5$dpxWaitScanOnset
df5$isi2_onset <- df5$dpxIsi2Onset - df5$dpxWaitScanOnset
df5$isi2_offset <- df5$dpxIsi2Offset - df5$dpxWaitScanOnset
df5$interv_onset <- df5$dpxInterventionOnset - df5$dpxWaitScanOnset
df5$interv_offset <- df5$dpxInterventionOffset - df5$dpxWaitScanOnset
df5$iti_onset <- df5$dpxItiOnset - df5$dpxWaitScanOnset
df5$iti_offset <- df5$dpxItiOffset - df5$dpxWaitScanOnset
df5$iri_onset <- df5$dpxIriOnset - df5$dpxWaitScanOnset
df5$iri_offset <- df5$dpxIriOffset - df5$dpxWaitScanOnset
View(df5)
df4 <- subset(df3, select = c("run_num","trial","condition", "participant",
"dpxWaitScanOnset","dpxTrialOnset",
"dpxMineButton", "dpxTrialOffset","dpxIsi1Onset","dpxIsi1Offset",
"dpxFeedbackOnset","feedback", "dpxFeedbackOffset",
"dpxIsi2Onset", "dpxIsi2Offset",
"dpxInterventionOnset","agent_interv","dpxInterventionButton", "dpxInterventionOffset",
"dpxItiOnset", "dpxItiOffset", "dpxIriOnset", "dpxIriOffset"))
onsets3 <- which(!is.na(df4$dpxWaitScanOnset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah3 <- rep(df4$dpxWaitScanOnset[onsets3], each = 30) # here are your final trigger onsets to be fed into your df
## Fill in IRI time variables
onsets <- which(!is.na(df4$dpxIriOnset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah <- rep(df4$dpxIriOnset[onsets], each = 30) # here are your final IRI onsets to be fed into your df
onsets2 <- which(!is.na(df4$dpxIriOffset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah2 <- rep(df4$dpxIriOffset[onsets2], each = 30) # here are your final IRI onsets to be fed into your df
emptyrow <- which(is.na(df4$trial))
df5 <- df4[-emptyrow,]
df5$dpxWaitScanOnset <- blah3
df5$dpxIriOnset <- blah
df5$dpxIriOffset <- blah2
df5$trigger_onset <- 0
df5$trial_onset <- df5$dpxTrialOnset - df5$dpxWaitScanOnset
df5$trial_offset <- df5$dpxTrialOffset - df5$dpxWaitScanOnset
df5$isi1_onset <- df5$dpxIsi1Onset - df5$dpxWaitScanOnset
df5$isi1_offset <- df5$dpxIsi1Offset - df5$dpxWaitScanOnset
df5$fb_onset <- df5$dpxFeedbackOnset - df5$dpxWaitScanOnset
df5$fb_offset <- df5$dpxFeedbackOffset - df5$dpxWaitScanOnset
df5$isi2_onset <- df5$dpxIsi2Onset - df5$dpxWaitScanOnset
df5$isi2_offset <- df5$dpxIsi2Offset - df5$dpxWaitScanOnset
df5$interv_onset <- df5$dpxInterventionOnset - df5$dpxWaitScanOnset
df5$interv_offset <- df5$dpxInterventionOffset - df5$dpxWaitScanOnset
df5$iti_onset <- df5$dpxItiOnset - df5$dpxWaitScanOnset
df5$iti_offset <- df5$dpxItiOffset - df5$dpxWaitScanOnset
df5$iri_onset <- df5$dpxIriOnset - df5$dpxWaitScanOnset
df5$iri_offset <- df5$dpxIriOffset - df5$dpxWaitScanOnset
View(df5)
setwd("/Users/hayley/Dropbox (Personal)/Studies/OptControl/OptCon_fMRI/analyses/")
setwd("/Users/hayley/Dropbox (Personal)/Studies/OptControl/UCR_fMRI/analyses/imaging/")
write.csv(df5, "data.csv")
setwd("/Users/hayley/Dropbox (Personal)/Studies/OptControl/UCR_fMRI/behavioral_data/")
temp1 = list.files(pattern ="*.csv")  #all data files
# prep
allData <- lapply(temp1, function(.file){
#dat<-read.csv(.file, header=T, col.names = paste0("V",seq_len(137)), fill = TRUE) ###The problem is that they added variables when fixing things, so need to figure out how to concatenate without losing info!
#dat<-read.csv(.file, header=T, fill = TRUE) ###The problem is that they added variables when fixing things, so need to figure out how to concatenate without losing info!
dat<-read.csv(.file, header=T)
#dat$id<-as.character(.file)
dat    # return the dataframe
})
# combine into all trials, all subjects
#test <- do.call(merge(allData, all.y = T, all.x = T), allData)
require(plyr)
#df <- rbind.fill(allData)
df <- do.call(rbind, allData)
length(unique(df$participant)) # n=22 subjects collected
table(df$participant) # how many trials do you have for each subject?
index <- which(table(df$participant) != 125) #which subjects dont have all 120 trials?
#df2<-df[!(df$subject == 13 | df$subject == 18 | df$subject == 19 | df$subject == 24 | df$subject == 28 | df$subject == 29),] #make a vector from the index variable and insert it here
#length(unique(df2$subject)) # now we have n=23 subjects
df3 <- df[!is.na(df$exp_mode),] #remove some of the NA rows
length(unique(df3$participant)) # now we have n=22 subjects
# create block number variable
rep1 <- rep(1:4,each = 31)
rep1a <- c(0,rep1)
rep2 <- rep(rep1a,length(unique(df3$participant)))
df3$run_num <- rep2
rep1 <- rep(1:4,each = 31)
rep1a <- c(0,rep1)
rep2 <- rep(rep1a,length(unique(df3$participant)))
df3$run_num <- rep2
# initial subset of necessary cols
df4 <- subset(df3, select = c("run_num","trial","condition", "participant",
"dpxWaitScanOnset","dpxTrialOnset",
"dpxMineButton", "dpxTrialOffset","dpxIsi1Onset","dpxIsi1Offset",
"dpxFeedbackOnset","feedback", "dpxFeedbackOffset",
"dpxIsi2Onset", "dpxIsi2Offset",
"dpxInterventionOnset","agent_interv","dpxInterventionButton", "dpxInterventionOffset",
"dpxItiOnset", "dpxItiOffset", "dpxIriOnset", "dpxIriOffset"))
## Fill in trigger start time variable
onsets3 <- which(!is.na(df4$dpxWaitScanOnset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah3 <- rep(df4$dpxWaitScanOnset[onsets3], each = 30) # here are your final trigger onsets to be fed into your df
## Fill in IRI time variables
onsets <- which(!is.na(df4$dpxIriOnset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah <- rep(df4$dpxIriOnset[onsets], each = 30) # here are your final IRI onsets to be fed into your df
onsets2 <- which(!is.na(df4$dpxIriOffset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah2 <- rep(df4$dpxIriOffset[onsets2], each = 30) # here are your final IRI onsets to be fed into your df
emptyrow <- which(is.na(df4$trial))
df5 <- df4[-emptyrow,]
df4 <- subset(df3, select = c("run_num","trial","condition", "participant",
"dpxWaitScanOffset","dpxTrialOnset",
"dpxMineButton", "dpxTrialOffset","dpxIsi1Onset","dpxIsi1Offset",
"dpxFeedbackOnset","feedback", "dpxFeedbackOffset",
"dpxIsi2Onset", "dpxIsi2Offset",
"dpxInterventionOnset","agent_interv","dpxInterventionButton", "dpxInterventionOffset",
"dpxItiOnset", "dpxItiOffset", "dpxIriOnset", "dpxIriOffset"))
onsets3 <- which(!is.na(df4$dpxWaitScanOffset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah3 <- rep(df4$dpxWaitScanOffset[onsets3], each = 30) # here are your final trigger onsets to be fed into your df
## Fill in IRI time variables
onsets <- which(!is.na(df4$dpxIriOnset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah <- rep(df4$dpxIriOnset[onsets], each = 30) # here are your final IRI onsets to be fed into your df
onsets2 <- which(!is.na(df4$dpxIriOffset))  #where are your run onset times? 4 onsets per 22 subjs = 88
blah2 <- rep(df4$dpxIriOffset[onsets2], each = 30) # here are your final IRI onsets to be fed into your df
emptyrow <- which(is.na(df4$trial))
df5 <- df4[-emptyrow,]
df5$dpxWaitScanOffset <- blah3
df5$dpxIriOnset <- blah
df5$dpxIriOffset <- blah2
df5$trigger_onset <- 0
df5$trial_onset <- df5$dpxTrialOnset - df5$dpxWaitScanOffset
df5$trial_offset <- df5$dpxTrialOffset - df5$dpxWaitScanOffset
df5$isi1_onset <- df5$dpxIsi1Onset - df5$dpxWaitScanOffset
df5$isi1_offset <- df5$dpxIsi1Offset - df5$dpxWaitScanOffset
df5$fb_onset <- df5$dpxFeedbackOnset - df5$dpxWaitScanOffset
df5$fb_offset <- df5$dpxFeedbackOffset - df5$dpxWaitScanOffset
df5$isi2_onset <- df5$dpxIsi2Onset - df5$dpxWaitScanOffset
df5$isi2_offset <- df5$dpxIsi2Offset - df5$dpxWaitScanOffset
df5$interv_onset <- df5$dpxInterventionOnset - df5$dpxWaitScanOffset
df5$interv_offset <- df5$dpxInterventionOffset - df5$dpxWaitScanOffset
df5$iti_onset <- df5$dpxItiOnset - df5$dpxWaitScanOffset
df5$iti_offset <- df5$dpxItiOffset - df5$dpxWaitScanOffset
df5$iri_onset <- df5$dpxIriOnset - df5$dpxWaitScanOffset
df5$iri_offset <- df5$dpxIriOffset - df5$dpxWaitScanOffset
setwd("/Users/hayley/Dropbox (Personal)/Studies/OptControl/UCR_fMRI/analyses/imaging/")
write.csv(df5, "data.csv")
